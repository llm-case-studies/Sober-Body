#!/usr/bin/env node

/**
 * Auto-generates docs/INDEX.md from the folder structure
 * Usage: node docs/scripts/build-index.js
 */

const fs = require('fs');
const path = require('path');

const docsPath = path.join(__dirname, '..');
const indexPath = path.join(docsPath, 'INDEX.md');

function scanFolder(folderPath, basePath = '') {
  const items = [];
  
  if (!fs.existsSync(folderPath)) return items;
  
  const entries = fs.readdirSync(folderPath, { withFileTypes: true });
  
  for (const entry of entries) {
    if (entry.name.startsWith('.')) continue;
    
    const fullPath = path.join(folderPath, entry.name);
    const relativePath = path.join(basePath, entry.name);
    
    if (entry.isDirectory()) {
      const subItems = scanFolder(fullPath, relativePath);
      if (subItems.length > 0) {
        items.push({
          name: entry.name,
          type: 'folder',
          path: relativePath,
          children: subItems
        });
      }
    } else if (entry.name.endsWith('.md')) {
      items.push({
        name: entry.name.replace('.md', ''),
        type: 'file',
        path: relativePath
      });
    }
  }
  
  return items.sort((a, b) => {
    // Folders first, then files
    if (a.type !== b.type) {
      return a.type === 'folder' ? -1 : 1;
    }
    return a.name.localeCompare(b.name);
  });
}

function generateMarkdown(items, depth = 0) {
  let markdown = '';
  const indent = '  '.repeat(depth);
  
  for (const item of items) {
    if (item.type === 'folder') {
      markdown += `${indent}* **${item.name}/**\n`;
      if (item.children && item.children.length > 0) {
        markdown += generateMarkdown(item.children, depth + 1);
      }
    } else {
      const displayName = item.name.replace(/^\d+[-_]/, ''); // Remove number prefixes
      markdown += `${indent}* [${displayName}](${item.path})\n`;
    }
  }
  
  return markdown;
}

function generateIndex() {
  const structure = scanFolder(docsPath);
  
  // Separate active docs from archive
  const activeItems = structure.filter(item => item.name !== '80_archive');
  const archiveItems = structure.filter(item => item.name === '80_archive');
  
  let content = `# ðŸ“š Documentation Index

*Auto-generated from folder structure - do not edit manually*

## Active Documentation

`;
  
  content += generateMarkdown(activeItems);
  
  if (archiveItems.length > 0) {
    content += `\n## Archive

`;
    // Collapse archive by default - just show top level
    content += `* **80_archive/** - Historical documents and superseded versions\n`;
    for (const archiveItem of archiveItems) {
      if (archiveItem.children) {
        for (const child of archiveItem.children) {
          content += `  * ${child.name}/\n`;
        }
      }
    }
  }
  
  content += `\n---

*Last updated: ${new Date().toISOString().split('T')[0]}*
*Generated by: \`docs/scripts/build-index.js\`*
`;
  
  fs.writeFileSync(indexPath, content);
  console.log(`âœ… Generated docs/INDEX.md`);
}

if (require.main === module) {
  generateIndex();
}

module.exports = { generateIndex };